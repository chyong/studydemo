1.什么是RPC：
    RPC，Remote Procedure Call即远程过程调用，远程过程调用其实对标的是本地过程调用。简单的说一台服务器内部的方法调用都可以称为本地过程调用，而远程过程调用实际上指的是一台服务器调用远程另一台服务器上的某个方法，
    这就是远程过程调用。RPC对标的是本地过程调用，至于RPC要如何调用远程的方法可以走HTTP，也可以是基于TCP自定义协议。
2.什么是Dubbo？
    Dubbo是阿里巴巴2011年开源的一个基于Java的RPC框架，它实现了面向接口的代理RPC调用，并且可以配合ZooKeeper等组件实现服务注册和发现功能，并且拥有负载均衡、容错机制等。
3.Dubbo基本原理：
    基本流程：
        服务提供者Provider启动然后向注册中心注册自己所能提供的服务。服务消费者Consumer启动向注册中心订阅自己所需的服务。然后注册中心将提供者元信息通知给Consumer，之后Consumer因为已经从注册中心获取提供者的地址，
        因此可以通过负载均衡选择一个Provider直接调用。之后服务提供方元数据变更的话注册中心会把变更推送给服务消费者。服务提供者和消费者都会在内存中记录着调用的次数和时间，然后定时的发送统计数据到监控中心。
        注意：
            注册中心和监控中心是可选的，你可以不要监控，也不要注册中心，直接在配置文件里面写然后提供方和消费方直连。然后注册中心、提供方和消费方之间都是长连接，和监控方不是长连接，并且消费方是直接调用提供方，
            不经过注册中心。就算注册中心和监控中心宕机了也不会影响到已经正常运行的提供者和消费者，因为消费者有本地缓存提供者的信息。
4.Dubbo的可扩展机制SPI：
	Dubbo依靠SPI机制实现了插件化功能，几乎将所有的功能组件做成基于SPI实现，并且默认提供了很多可以直接使用的扩展点，实现了面向功能进行拆分的对扩展开放的架构。
	SPI(Service Provider Interface)，一种服务扩展机制，大致就是通过事先配置的方式找到使用时需要的具体实现类，比如Java SPI约定在Classpath下的META-INF/services/目录里创建一个以服务接口命名（接口的全限定名）的文件，
	然后文件里面记录的是此jar包提供的具体实现类的全限定名。当我们引用了这个jar包的时候就可以去这个jar包的META-INF/services/目录下根据接口全限定名找到该文件，然后读取文件里面的内容去进行实现类的加载与实例化。
	但Java SPI有个缺点，就是不能按需加载实现类，Java SPI默认会将配置文件里配置的所有实现类全部实例化，但有些类不是我们使用时需要的，这就造成了资源浪费。而Dubbo SPI解决了这一痛点，Dubbo SPI通过在配置文件里给每行配置
	信息行首加一个名称（name），也就是键值对的配置形式，实现了按需加载的功能，即每次使用时通过名称去文件里面找到对应的实现类全限定名然后加载实例化。Dubbo SPI除了可以按需加载实现类之外，增加了IOC和AOP的特性，
	还有个自适应扩展机制。Dubbo对配置文件目录的约定，不同于Java SPI，Dubbo分为了三类目录：
		META-INF/services/ 目录：该目录下的SPI配置文件是为了用来兼容Java SPI。
		META-INF/dubbo/ 目录：该目录存放用户自定义的SPI配置文件。
		META-INF/dubbo/internal/ 目录：该目录存放Dubbo内部使用的SPI配置文件。
    a.Dubbo SPI源码流程：
    	Dubbo主要通过ExtensionLoader类实现SPI功能的，大致流程就是先通过接口类（ExtensionLoader.getExtensionLoader(Class.type)）得到一个ExtensionLoader实例，然后再通过ExtensionLoader.getExtension(name)
    	得到指定名字的实现类实例。比如：
    		ExtensionLoader<Person> extensionLoader = ExtensionLoader.getExtensionLoader(Person.class);
        	Person person = extensionLoader.getExtension("black");
        1.ExtensionLoader：
        	ExtensionLoader表示某个接口的扩展点加载器，可以用来加载某个扩展点实例。在ExtensionLoader中有三个非常重要的属性：
        		1.Class<?> type：表示当前ExtensionLoader实例是哪个接口的扩展点加载器
        		2.ExtensionFactory objectFactory：扩展点工厂（对象工厂），可以获得某个对象
        		3.ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS：被static修饰，缓存某个接口类型所对应的ExtensionLoader实例
            ExtensionLoader和ExtensionFactory的区别在于：
            	1.ExtensionLoader最终所得到的对象是Dubbo SPI机制产生的
            	2.ExtensionFactory最终所得到的对象可能是Dubbo SPI机制所产生的，也可能是从Spring容器中所获得的对象
            在ExtensionLoader中有三个常用的方法：
            	1.getExtension("dubbo")：表示获取名字为dubbo的扩展点实例
            	2.getAdaptiveExtension()：表示获取一个自适应的扩展点实例
            	3.getActivateExtension(URL url, String[] values, String group)：表示一个可以被url激活的扩展点实例
        2.getExtensionLoader(Class.type)：
        	根据接口类型先尝试从缓存（EXTENSION_LOADERS）中获取一个ExtensionLoader实例，如果没有则通过ExtensionLoader类的构造方法创建一个，然后再将创建好的实例放入缓存。
        3.getExtension(String name)：
        	根据扩展点名称获取扩展点实例对象，先判断是否是默认扩展点（name="true"），如果是返回默认扩展点实例对象，如果不是则调用createExtension(name)方法获取扩展点实例对象，
        	其中调用createExtension(name)方法前会进行双重检查（单例模式-synchronized）防止高并发情况下扩展点实例对象重复创建。
        4.createExtension(String name)：
        	该方法主要就是根据扩展点名称创建扩展点实例对象，创建前先尝试从缓存（EXTENSION_LOADERS）中获取，如果没有再执行实例化的逻辑，实例化完后存入缓存，主要步骤如下：
        		1.根据name找到对应的扩展点实现类 getExtensionClasses()
        		2.根据实现类生成一个实例，把实现类和对应生成的实例进行缓存
        		3.对生成出来的实例进行依赖注入（给实例的属性进行赋值）injectExtension(instance)
        		4.对依赖注入后的实例进行AOP（Wrapper），把当前接口类的所有的Wrapper全部一层一层包裹在实例对象上，每包裹一个Wrapper后，也会对Wrapper对象进行依赖注入
        		5.返回最终的Wrapper对象
        5.getExtensionClasses()：
        	根据扩展点类型的全限定名加载扩展点所有的实现类并放到缓存里，下次可以直接从缓存取，主要调用loadExtensionClasses()，调用之前对缓存map加锁（synchronized）解决并发问题。
        6.loadExtensionClasses()：
        	1.根据接口的全限定名去META-INF/dubbo/internal/目录下寻找对应的文件，调用loadResource方法进行加载
        	2.根据接口的全限定名去META-INF/dubbo/目录下寻找对应的文件，调用loadResource方法进行加载
        	3.根据接口的全限定名去META-INF/services/目录下寻找对应的文件，调用loadResource方法进行加载
        	其中loadResource方法在loadDirectory方法里，这里兼容了老版本的逻辑以及Java SPI，结果存到一个map中
        7.loadResource(extensionClasses, classLoader, resourceURL)：
        	loadResource方法就是完成对文件内容的解析，按行进行解析，会解析出"="两边的内容，"="左边的内容就是扩展点的name，右边的内容就是扩展点实现类，并且会利用ExtensionLoader类的类加载器来加载扩展点实现类。
        	然后调用loadClass方法对name和扩展点实例进行详细的解析，并且最终把他们放到Map中去。
        8.loadClass(extensionClasses, resourceURL, Class.forName(line, true, classLoader), name)：
        	loadClass方法会做如下几件事情：
	        	1.当前扩展点实现类上是否存在@Adaptive注解，如果存在则把该类认为是当前接口的默认自适应类（接口代理类），并把该类存到cachedAdaptiveClass属性上。
	        	2.当前扩展点实现是否是一个当前接口的一个Wrapper类，如何判断的？就是看当前类中是否存在一个构造方法，该构造方法只有一个参数，参数类型为接口类型，如果存在这一构造方法，那么这个类就是该接口的Wrapper类，
	        	如果是，则把该类添加到cachedWrapperClasses中去，cachedWrapperClasses是一个set。
	        	3.如果不是自适应类，或者也不是Wrapper类，则判断是有存在name，如果没有name，则报错。
	        	4.如果有多个name，则判断一下当前扩展点实现类上是否存在@Activate注解，如果存在，则把该类添加到cachedActivates中，cachedWrapperClasses是一个map。
	        	5.最后，遍历多个name，把每个name和对应的实现类存到extensionClasses中去，extensionClasses就是上文所提到的map。
            至此，加载类就走完了。
        回到createExtension(String name)方法中的逻辑，当前这个接口的所有扩展点实现类都扫描完了之后，就可以根据用户所指定的名字，找到对应的实现类了，然后进行实例化，然后进行IOC(依赖注入)和AOP。
    b.Dubbo中的自适应扩展：
    	对于有些扩展，希望在扩展方法被调用时，才灵活地根据运行时参数进行加载对应的扩展点，Dubbo通过一个代理机制实现了自适应扩展，简单的说就是为你想扩展的接口生成一个代理类，可以通过JDK或者javassist 编译你生成的代理类代码，
    	然后通过反射创建实例，这个实例里面的实现会根据本来方法的请求参数得知需要的扩展类，然后通过ExtensionLoader.getExtensionLoader(type.class).getExtension(从参数得来的name)，来获取真正的实例来调用，
    	相当于在真正的实例方法外包了一层同名同参数的方法，然后在这个方法里通过请求参数（URL）找到真正的扩展点名称，最后通过getExtension(扩展点名称)实例化真正的扩展类对象并完成方法调用。
    	createAdaptiveExtensionClass()：
    		createAdaptiveExtensionClass方法就是Dubbo中默认生成Adaptive类实例的逻辑，说白了，这个实例就是当前这个接口的一个代理对象。代理逻辑就是在
    		newAdaptiveClassCodeGenerator(type, cachedDefaultName).generate()方法中。
    			1.type就是接口
    			2.cacheDefaultName就是该接口默认的扩展点实现的名字
        除了依赖注入时通过ExtensionFactory获取自适应扩展点的代理对象，在Dubbo中还设计另外一种机制来生成自适应扩展点，这种机制就是可以通过@Adaptive注解来指定某个类为某个接口的代理类，如果指定了，
        Dubbo在生成自适应扩展点对象时实际上生成的就是@Adaptive注解所注解的类的实例对象，不是代理对象，一般@Adaptive注解指定的方法时才会生成代理对象，但该方法还要满足以下几个条件：
        	1.该方法如果是无参的，那么则会报错
        	2.该方法有参数，可以有多个，并且其中某个参数类型是URL，那么则可以进行代理
        	3.该方法有参数，可以有多个，但是没有URL类型的参数，那么则不能进行代理
        	4.该方法有参数，可以有多个，没有URL类型的参数，但是如果这些参数类型，对应的类中存在getUrl方法（返回值类型为URL），那么也可以进行代理
    c.Dubbo中的IOC：
    	injectExtension(T instance)方法
    	1.根据当前实例的类，找到这个类中的setter方法，进行依赖注入
    	2.先分析出setter方法的参数类型pt
    	3.在截取出setter方法所对应的属性名property
    	4.调用objectFactory.getExtension(pt, property)得到一个对象，这里就会从Spring容器或通过DubboSpi机制得到一个对象，比较特殊的是，如果是通过Dubbo SPI机制得到的对象，是pt这个类型的一个自适应对象(代理对象)。
    	5.再反射调用setter方法进行注入
    d.Dubbo中的AOP：
    	dubbo中也实现了一套非常简单的AOP，就是利用Wrapper，如果一个接口的扩展点中包含了多个Wrapper类，那么在实例化完某个扩展点后，就会利用这些Wrapper类对这个实例进行包裹，比如：现在有一个DubboProtocol的实例，
    	同时对于Protocol这个接口还有很多的Wrapper，比如ProtocolFilterWrapper、ProtocolListenerWrapper，那么，当对DubboProtocol的实例完成了IOC之后，就会先调用new ProtocolFilterWrapper(DubboProtocol实例)
    	生成一个新的Protocol的实例，再对此实例进行IOC，完了之后，会再调用new ProtocolListenerWrapper(ProtocolFilterWrapper实例)生成一个新的Protocol的实例，然后进行IOC，从而完成DubboProtocol实例的AOP。
5.Dubbo服务导出：
    服务导出前，Spring都会为要导出的实现类额外生成一个ServiceBean（无论是xml配置还是@service注解等配置），这个bean即为一个Dubbo服务，服务导出的入口方法为ServiceBean.export()，此方法会调用ServiceConfig.export()方法，
    进行真正的服务导出。
    a.URL：
        URL指的是统一资源定位符，在网络上一般指代地址，本质上看其实就是一串包含特殊格式的字符串，标准格式如下：
            protocol://username:password@host:port/path?key=value&key=value
        Dubbo就是采用URL的方式来作为约定的参数类型，被称为公共契约，URL具体的参数如下：
            protocol：指的是dubbo中的各种协议，如：dubbo、thrift、http
            username/password：用户名/密码
            host/port：主机/端口
            path：接口的名称
            parameters：参数键值对
    b.服务导出思路：
        服务导出要做的几件事情：
            1.确定服务的参数
                参数来源：
                    a.@Service注解上或xml里所定义的参数，即ServiceConfig、ReferenceConfig等编程接口采集的配置，在Dubbo的源码中叫AbstractConfig
                    b.dubbo.properties文件中配置的参数，即本地文件，Dubob的源码中叫做PropertiesConfiguration
                    c.配置中心，即外部化配置，相当于一个远程的dubbo.properties文件，支持按应用进行配置，也可以按全局进行配置两种，在Dubbo的源码中AppExternalConfiguration表示应用配置，
                      ExternalConfiguration表示全局配置。
                    d.系统环境变量，可以在启动应用程序时，通过-D的方式来指定参数，在Dubbo的源码中叫SystemConfiguration
                配置覆盖关系的优先级，从高到低如下：
                    SystemConfiguration -> AppExternalConfiguration -> ExternalConfiguration -> AbstractConfig -> PropertiesConfiguration
            2.确定服务支持的协议
                确定服务所支持的协议，就是看用户配了多少个Protocol，可以从上述参数的四个来源中获取协议，结果可能是一个协议，也可能是多个协议。
            3.构造服务最终的URL
                确定好参数以及协议后，就可以组装服务的URL了，Dubbo中支持服务动态配置，即可以在服务导出后动态的去修改服务配置，也就是在把服务的URL注册到注册中心去之前先按照动态配置中所添加的配置重写一下URL，
                最后得到的URL才是真正准确的服务提供者URL。
            4.将服务URL注册到注册中心去
                将URL注册到注册中心上去，如果用户配置了多个注册中心，要将服务URL注册到每个注册中心里去。
            5.根据服务支持的不同协议，启动不同的Server，用来接收和处理请求
                在服务URL中指定了协议，比如Http协议、Dubbo协议。根据不同的协议启动对应的Server，比如Http协议就启动Tomcat、Jetty，Dubbo协议就启动Netty，但不能只启动Server，还需要绑定一个RequestHandler，
                用来处理请求。比如，Http协议对应的就是InternalHandler，Dubbo协议对应的就是ExchangeHandler。
            6.因为Dubbo支持动态配置服务参数，所以服务导出时还需要绑定一个监听器Listener来监听服务的参数是否有修改，如果发现有修改，则需要重新进行导出
    c.服务导出源码流程：
        1.ServiceBean.export()方法是导出的入口方法，会执行ServiceConfig.export()方法完成服务导出，导出完了之后会发布一个Spring事件ServiceBeanExportedEvent
        2.在ServiceConfig.export()方法中会先调用checkAndUpdateSubConfigs()，这个方法主要完成AbstractConfig的参数刷新(从配置中心获取参数等等)，AbstractConfig是指ApplicationConfig、ProtocolConfig、
          ServiceConfig等等，刷新完后会检查stub、local、mock等参数是否配置正确
        3.参数刷新和检查完成了之后，就会开始导出服务，如果配置了延迟导出，那么则按指定的时间利用ScheduledExecutorService来进行延迟导出
        4.否则调用doExport()进行服务导出
        5.继续调用doExportUrls()进行服务导出
        6.首先通过loadRegistries()方法获得所配置的注册中心的URL，可能配了多个注册中心，那么当前所导出的服务需要注册到每个注册中心去，这里，注册中心的是以URL的方式来表示的，使用的是什么注册中心、
          注册中心的地址和端口，给注册中心所配置的参数等等，都会存在在URL上，此URL以registry://开始
        7.获得到注册中心的registryURLs之后，就会遍历当前服务所有的ProtocolConfig，调用doExportUrlsFor1Protocol(protocolConfig, registryURLs);方法把当前服务按每个协议每个注册中心分别进行导出
        8.在doExportUrlsFor1Protocol()方法中，会先构造一个服务URL，包括
            a.服务的协议dubbo://
            b.服务的IP和PORT，如果指定了就取指定的，没有指定IP就获取服务器上网卡的IP，
            c.以及服务的PATH，如果没有指定PATH参数，则取接口名
            d.以及服务的参数，参数包括服务的参数，服务中某个方法的参数
            e.最终得到的URL类似：dubbo://192.168.1.110:20880/com.tuling.DemoService?timeout=3000&&sayHello.loadbalance=random
        9.得到服务的URL之后，会把服务URL作为一个参数添加到registryURL中去（registryURL.addParameterAndEncoded(EXPORT_KEY, url.toFullString())），然后把registryURL、服务的接口、
          当前服务实现类ref生成一个Invoker代理对象，再把这个代理对象和当前ServiceConfig对象包装成一个DelegateProviderMetaDataInvoker对象，DelegateProviderMetaDataInvoker就表示了完整的一个服务
        10.接下来就会使用Protocol去export导出服务了，导出之后将得到一个Exporter对象（该Exporter对象，可以理解为主要可以用来卸载（unexport）服务，什么时候会卸载服务？在优雅关闭Dubbo应用的时候）
        11.接下来我们来详细看看Protocol是怎么导出服务的？
            一旦调用protocol.export(wrapperInvoker)方法时，因为protocol是Protocol接口的一个Adaptive对象，所以此时会根据wrapperInvoker的genUrl方法得到一个url，根据此url的协议找到对应的扩展点，
            此时扩展点就是RegistryProtocol，但是，因为Protocol接口有两个包装类，一个是ProtocolFilterWrapper、ProtocolListenerWrapper，所以实际上在调用export方法时，会经过这两个包装类的export方法，
            但是在这两个包装类的export方法中都会Registry协议进行了判断，不会做过多处理，所以最终会直接调用到RegistryProtocol的export(Invoker<T> originInvoker)方法
        12.在RegistryProtocol的export(Invoker<T> originInvoker)方法中，主要完成了以下几件事情：
            a.生成监听器，监听动态配置中心此服务的参数数据的变化，一旦监听到变化，则重写服务URL，并且在服务导出时先重写一次服务URL
            b.拿到重写之后的URL之后，调用doLocalExport()进行服务导出，在这个方法中就会调用DubboProtocol的export方法去导出服务了，导出成功后将得到一个ExporterChangeableWrapper
                ⅰ.在DubboProtocol的export方法中主要要做的事情就是启动NettyServer，并且设置一系列的RequestHandler，以便在接收到请求时能依次被这些RequestHandler所处理
            c.从originInvoker中获取注册中心的实现类，比如ZookeeperRegistry
            d.将重写后的服务URL进行简化，把不用存到注册中心去的参数去除
            e.把简化后的服务URL调用ZookeeperRegistry.registry()方法注册到注册中心去
            f.最后将ExporterChangeableWrapper封装为DestroyableExporter对象返回，完成服务导出
        Exporter架构：
            一个服务导出成功后，会生成对应的Exporter：
                1.DestroyableExporter：Exporter的最外层包装类，这个类的主要作用是可以用来unexporter对应的服务
                2.ExporterChangeableWrapper：这个类主要负责在unexport对应服务之前，把服务URL从注册中心中移除，把该服务对应的动态配置监听器移除
                3.ListenerExporterWrapper：这个类主要负责在unexport对应服务之后，把服务导出监听器移除
                4.DubboExporter：这个类中保存了对应服务的Invoker对象，和当前服务的唯一标志，当NettyServer接收到请求后，会根据请求中的服务信息，找到服务对应的DubboExporter对象，
                  然后从对象中得到Invoker对象
        服务端Invoker架构：
            1.ProtocolFilterWrapper$CallbackRegistrationInvoker：会去调用下层Invoker，下层Invoker执行完了之后，会遍历过滤器，查看是否有过滤器实现了ListenableFilter接口，如果有，
              则回调对应的onResponse方法，比如TimeoutFilter，当调用完下层Invoker之后，就会计算服务的执行时间
            2.ProtocolFilterWrapper$1：ProtocolFilterWrapper中的过滤器组成的Invoker，利用该Invoker，可以执行服务端的过滤器，执行完过滤器之后，调用下层Invoker
            3.RegistryProtocol$InvokerDelegate：服务的的委托类，里面包含了DelegateProviderMetaDataInvoker对象和服务对应的providerUrl，执行时直接调用下层Invoker
            4.DelegateProviderMetaDataInvoker：服务的的委托类，里面包含了AbstractProxyInvoker对象和ServiceConfig对象，执行时直接调用下层Invoker
            5.AbstractProxyInvoker：服务接口的代理类，绑定了对应的实现类，执行时会利用反射调用服务实现类实例的具体方法，并得到结果
6.Dubbo服务引入：
    服务引入前，Spring都会为要引入的实现类额外生成一个ReferenceBean（无论是xml配置还是@Reference注解等配置），服务引入的入口方法为ReferenceBean.getObject()，此方法会调用ReferenceConfig.get()方法，
    然后再调用ReferenceConfig.init()方法真正进行服务的引入。
    a.服务引入的时机：
        服务的引入时机有两种，第一种是饿汉式，第二种是懒汉式。饿汉式是通过实现Spring的InitializingBean接口中的afterPropertiesSet方法，容器通过调用ReferenceBean的afterPropertiesSet方法时引入服务。
        懒汉式是只有当这个服务被注入到其他类中时启动引入流程，也就是说用到了才会开始服务引入。默认情况下，Dubbo使用懒汉式引入服务，如果需要使用饿汉式，可通过配置dubbo:reference的init属性开启。
    b.服务引入的三种方式：
        服务的引入分为三种，第一种是本地引入、第二种是直接连接引入远程服务、第三种是通过注册中心引入远程服务。本地引入主要是自己调用自己的服务，避免远程网络调用的开销，一般服务引入会先去本地缓存找找看有没有
        本地服务，直连远程引入服务即Consumer直接配死Provider的地址，然后直连，注册中心引入远程服务，Consumer通过注册中心得知Provider的相关信息，然后进行服务的引入，这里还包括多注册中心，
        同一个服务多个提供者的情况。
    c.服务引入流程：
        被@Reference注解标注了的属性，在它所在的类被实例化（即使用时）后进行依赖注入的时候，会被（依赖注入）赋值，赋值的对象为ReferenceBean中get()方法所返回的对象，这个对象是一个代理对象。
        对于ReferenceBean，它表示应用想要引入的服务的信息，在执行get()时会做如下几步：
            1.调用checkAndUpdateSubConfigs()，检查和更新参数，和服务提供者类似，把ReferenceBean里的属性的值更新为优先级最高的参数值
            2.调用init()方法先把消费者所引入服务设置的参数添加到一个map中，等会根据这个map中的参数去从注册中心查找服务，然后调用createProxy(map)方法生成代理对象ref
            3.createProxy(map)方法，如果是本地服务引入，通过URL url = new URL(LOCAL_PROTOCOL, LOCALHOST_VALUE, 0, interfaceClass.getName()).addParameters(map);
              REF_PROTOCOL.refer(interfaceClass, url)直接得到一个Invoker对象，如果不是本地服务引入，则分为直连服务引入和注册中心服务引入
            4.如果是直连服务引入，即url不为空（事先配置了url），则判断url是注册中心地址还是服务地址，如果是注册中心地址，则在url中添加一个refer参数，如果是服务地址，需要将url已有的配置与map中的参数进行合并
              ，然后将得到的url放入urls集合中
            5.如果url为空，则表示是注册中心服务引入，需要通过loadRegistries()把消费者配置的所有注册中心获取出来，然后遍历每个注册中心，将每个注册中心地址都添加REFER_KEY，然后放到urls集合中
            6.遍历urls集合：
                a.如果只有一个url，那么直接调用Protocol的refer(interfaceClass, urls.get(0));得到一个Invoker对象
                b.如果有多个url，则遍历每个url，分别调用Protocol的refer(interfaceClass, url);得到一个Invoker对象添加到invokers中
                c.如果url中存在注册中心地址，把invokers调用CLUSTER.join(new StaticDirectory(u, invokers));得到一个RegistryAwareClusterInvoker，如果url中不存在注册中心地址，
                  把invokers调用CLUSTER.join(new StaticDirectory(invokers));得到一个FailoverClusterInvoker，即封装所有invokers得到一个invoker
            7.把最终得到的invoker对象调用PROXY_FACTORY.getProxy(invoker);得到一个代理对象，并返回，这个代理对象就是ref
        接下来，来看Protorol.refer(interfaceClass, url)方法是怎么生成一个Invoker的？
            1.首先interfaceClass表示要引入的服务接口，url是注册中心的url（registry://），该url中有一个refer参数，参数值为当前所要引入服务的参数
            2.调用doRefer(cluster, registry, type, url)
            3.在doRefer方法中会生成一个RegistryDirectory
            4.然后通过directory.buildRouterChain(subscribeUrl);获取新版本中的路由器链，并添加到RegistryDirectory中去
            5.RegistryDirectory自身也实现了NotifyListener接口，因此完成了注册中心的监听。RegistryDirectory监听几个目录（注意，完成监听器的订阅绑定后，会自动触发一次去获取这些目录上的当前数据）
                a.当前所引入的服务的动态配置目录：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService:1.1.1:g1.configurators
                b.当前所引入的服务的提供者目录：/dubbo/org.apache.dubbo.demo.DemoService/providers
                c.当前所引入的服务的老版本动态配置目录：/dubbo/org.apache.dubbo.demo.DemoService/configurators
                d.当前所引入的服务的老版本路由器目录：/dubbo/org.apache.dubbo.demo.DemoService/routers
              directory.subscribe()方法向注册中心注册自身的信息，并且向注册中心订阅了providers节点、configurators节点和routers节点（即上述的几个目录），订阅了之后RegistryDirectory会收到
              这几个节点下的信息，就会触发DubboInvoker的生成（见下面DubboProtocol的服务引入），即用于远程调用的Invoker。
            6.调用cluster.join(directory)得到一个invoker
            7.返回invoker（如果消费者引入了多个group中的服务，那么这里返回的是new MergeableClusterInvoker<T>(directory);，否则返回的是new FailoverClusterInvoker<T>(directory);）
            8.但是，上面返回的两个Invoker都会被MockClusterInvoker包装，所以最终返回的是MockClusterInvoker。
        DubboProtocol的服务引入（Refer）：
            DubboProtocol中并没有refer方法，是在它的父类AbstractProtocol中才有的refer方法，调用protocolBindingRefer()方法得到一个Invoker后，会包装为一个AsyncToSyncInvoker
            然后作为refer方法的结果返回。在DubboProtocol的protocolBindingRefer()方法中会new一个DubboInvoker，然后就返回了。在构造DubboInvoker时，有一个非常重要的步骤，构造clients。
            DubboInvoker作为消费端服务的执行者，在调用服务时，是需要去发送Invocation请求的，而发送请求就需要client，之所以有多个client，是因为DubboProtocol支持多个。为了提高效率每次发送请求都会
            从clients轮询一个client去发送。clients是如何生成的：
                1.首先，一个DubboInvoker到底支持多少个Client呢？这是可以配置的，参数为connections，按指定的数字调用initClient(url)得到ExchangeClient。
                2.initClient(url)的实现逻辑为：
                    a.获取client参数，表示是用netty还是mina等等
                    b.获取codec参数，表示数据的编码方式
                    c.获取heartbeat参数，表示长连接的心跳时间，超过这个时间服务端没有收到数据则关闭socket，默认为1分钟
                    d.如果所指定的client没有对应的扩展点，则抛异常
                    e.获取lazy参数，默认为false，如果为true，那么则直接返回一个LazyConnectExchangeClient，表示真正在发送数据时才建立socket
                    f.否则调用Exchangers.connect(url, requestHandler)获得一个client
                    g.在connect()方法中调用HeaderExchanger的connect方法去建立socket连接并得到一个HeaderExchangeClient
                    h.在构造HeaderExchangeClient时需要先执行Transporters.connect()方法得到一个Client
                    i.会调用NettyTransporter的connect()去构造一个NettyClient
                    j.在构造NettyClient的过程中，会去初始化Netty的客户端，然后连接Server端，建立一个Socket连接
        Invoker总结：
            MockClusterInvoker：
                完成Mock功能，由MockClusterWrapper生成，MockClusterWrapper是Cluster接口的包装类，通过Cluster.join()方法得到MockClusterInvoker。
            FailoverClusterInvoker：
                完成集群容错功能，是MockClusterInvoker的下级。
            RegistryAwareClusterInvoker：
                如果指定了多个注册中心，那么RegistryAwareClusterInvoker完成选择默认的注册中心的进行调用，如果没有指定默认的，则会遍历注册中心进行调用，如果该注册中心没有对应的服务则跳过。
            DubboInvoker：
                完成Dubbo协议底层发送数据。
            ProtocolFilterWrapper$CallbackRegistrationInvoker：
                完成对filter的调用，ProtocolFilterWrapper是Protocol接口的包装类，通过Protocol.refer()方法得到CallbackRegistrationInvoker。
7.Dubbo服务调用：
    客户端调用接口的某个方法，实际调用的是该接口的代理类，代理类会通过cluster从directory中获取invokers，然后进行router的过滤（其中看配置也会添加mockInvoker用于服务降级），
    然后再通过SPI得到loadBalance（负载均衡）再对invokers进行一次过滤。最终得到要调用的远程服务对应的invoker，此时根据具体的协议构造请求头，然后将参数根据具体的序列化协议序列化之后构造塞入请求体中，
    再通过NettyClient发起远程调用。服务端NettyServer收到请求之后，根据协议得到信息并且反序列化成对象，再按照派发策略派发消息，默认是All，扔给业务线程池。业务线程会根据消息类型判断然后得到serviceKey
    从之前服务暴露生成的exporterMap中得到对应的Invoker，然后调用invoker.invoke()（AbstractProxyInvoker）方法通过反射调用真实的实现类。最终将结果返回，因为请求和响应都有一个统一的ID，
    客户端根据响应的ID找到存储起来的Future，然后将返回结果塞入响应（Response）再唤醒等待future的线程，完成一次远程调用全过程。
    a.服务消费端执行逻辑：
        1.MockClusterInvoker.invoke(new RpcInvocation(method, args))：Mock逻辑
        2.AbstractClusterInvoker.invoke(invocation)：把RpcContext中设置的Attachments添加到invocation对象上，调用路由链从服务目录上筛选出适合的服务Invoker，获得服务均衡策略loadbalance
        3.FailoverClusterInvoker.doInvoke(invocation, invokers, loadbalance)：根据负载均衡策略选出一个invoker，然后执行
        4.InvokerWrapper.invoke(invocation)：没做什么事情
        5.CallbackRegistrationInvoker.invoke(invocation)：开始执行Filter链，执行完得到结果后，会获取ListenableFilter中的listener，执行listener的onResponse方法
        6.ConsumerContextFilter.invoke(invocation)：设置RpcContext中LocalAddress、RemoteAddress、RemoteApplicationName参数
        7.FutureFilter.invoke(invocation)
        8.MonitorFilter.invoke(invocation)：方法的执行次数+1
        9.ListenerInvokerWrapper.invoke(invocation)：没做什么事情
        10.AsyncToSyncInvoker.invoke(invocation)：异步转同步，会先用下层Invoker去异步执行，然后阻塞Integer.MAX_VALUE时间，直到拿到了结果
        11.AbstractInvoker.invoke(invocation)：主要调用DubboInvoker的doInvoke方法，如果doInvoker方法出现了异常，会进行包装，包装成AsyncRpcResult
        12.DubboInvoker.doInvoke(invocation)：从clients轮询出一个client进行数据发送，如果配置了不关心结果，则调用ReferenceCountExchangeClient的send方法，
           否则调用ReferenceCountExchangeClient的request方法
        13.ReferenceCountExchangeClient.request(Object request, int timeout)：没做什么事情
        14.HeaderExchangeClient.request(Object request, int timeout)：没做什么事情
        15.HeaderExchangeChannel.request(Object request, int timeout)：构造一个Request对象，并且会构造一个DefaultFuture对象来阻塞timeout的时间来等待结果，在构造DefaultFuture对象时，
           会把DefaultFuture对象和req的id存入FUTURES中，FUTURES是一个Map，当HeaderExchangeHandler接收到结果时，会从这个Map中根据id获取到DefaultFuture对象，然后返回Response。
        16.AbstractPeer.send(Object message)：从url中获取send参数，默认为false
        17.AbstractClient.send(Object message, boolean sent)：没做什么
        18.NettyChannel.send(Object message, boolean sent)：调用NioSocketChannel的writeAndFlush发送数据，然后判断send如果是true，那么则阻塞url中指定的timeout时间，因为如果send是false，
           在HeaderExchangeChannel中会阻塞timeout时间
        19.NioSocketChannel.writeAndFlush(Object msg)：最底层的Netty非阻塞式的发送数据
        总结：
            1.最外层是Mock逻辑，调用前，调用后进行Mock
            2.从服务目录中，根据当前调用的方法和路由链，筛选出部分服务Invoker（DubboInvoker）
            3.对服务Invoker进行负载均衡，选出一个服务Invoker
            4.执行Filter链
            5.AsyncToSyncInvoker完成异步转同步，因为DubboInvoker的执行是异步非阻塞的，所以如果是同步调用，则会在此处阻塞，知道拿到响应结果
            6.DubboInvoker开始异步非阻塞的调用
            7.HeaderExchangeChannel中会阻塞timeout的时间来等待结果，该timeout就是用户在消费端所配置的timeout
    b.服务提供端执行逻辑：
        1.NettyServerHandler：接收数据
        2.MultiMessageHandler：判断接收到的数据是否是MultiMessage，如果是则获取MultiMessage中的单个Message，传递给HeartbeatHandler进行处理
        3.HeartbeatHandler：判断是不是心跳消息，如果是不是则把Message传递给AllChannelHandler
        4.AllChannelHandler：把接收到的Message封装为一个ChannelEventRunnable对象，扔给线程池进行处理
        5.ChannelEventRunnable：在ChannelEventRunnable的run方法中会调用DecodeHandler处理Message
        6.DecodeHandler：按Dubbo协议的数据格式，解析当前请求的path，version，方法，方法参数等等，然后把解析好了的请求交给HeaderExchangeHandler
        7.HeaderExchangeHandler：处理Request数据，首先构造一个Response对象，然后调用ExchangeHandlerAdapter得到一个CompletionStage future，然后给future通过whenComplete绑定一个回调函数，
          当future执行完了之后，就可以从回调函数中得到ExchangeHandlerAdapter的执行结果，并把执行结果设置给Response对象，通过channel发送出去。
        8.ExchangeHandlerAdapter：从本机已经导出的Exporter中根据当前Request所对应的服务key，去寻找Exporter对象，从Exporter中得到Invoker，然后执行invoke方法，
          此Invoker为ProtocolFilterWrapper$CallbackRegistrationInvoker
        9.ProtocolFilterWrapper$CallbackRegistrationInvoker：负责执行过滤器链，并且在执行完了之后回调每个过滤器的onResponse或onError方法
        10.EchoFilter：判断当前请求是不是一个回升测试，如果是，则不继续执行过滤器链了（服务实现者Invoker也不会调用了）
        11.ClassLoaderFilter：设置当前线程的classloader为当前要执行的服务接口所对应的classloader
        12.GenericFilter：把泛化调用发送过来的信息包装为RpcInvocation对象
        13.ContextFilter：设置RpcContext.getContext()的参数
        14.TraceFilter：先执行下一个invoker的invoke方法，调用成功后录调用信息
        15.TimeoutFilter：调用时没有特别处理，只是记录了一下当前时间，当整个filter链都执行完了之后回调TimeoutFilter的onResponse方法时，会判断本次调用是否超过了timeout
        16.MonitorFilter：记录当前服务的执行次数
        17.ExceptionFilter：调用时没有特别处理，在回调onResponse方法时，对不同的异常进行处理，详见Dubbo的异常处理
        18.DelegateProviderMetaDataInvoker：过滤器链结束，调用下一个Invoker
        19.AbstractProxyInvoker：在服务导出时，根据服务接口，服务实现类对象生成的，它的invoke方法就会执行服务实现类对象的方法，得到结果
    c.Dubbo的异常处理：
        当服务消费者在调用一个服务时，服务提供者在执行服务逻辑时可能会出现异常，对于Dubbo来说，服务消费者需要在消费端抛出这个异常，那么这个功能是怎么做到的呢？
        服务提供者在执行服务时，如果出现了异常，那么框架会把异常捕获，捕获异常的逻辑在AbstractProxyInvoker中，捕获到异常后，会把异常信息包装为正常的AppResponse对象，只是AppResponse的value属性没有值，
        exception属性有值。此后，服务提供者会把这个AppResponse对象发送给服务消费端，服务消费端是在InvokerInvocationHandler中调用AppResponse的recreate方法重新得到一个结果，在recreate方法中
        会去失败AppResponse对象是否正常，也就是是否存在exception信息，如果存在，则直接throw这个exception，从而做到服务执行时出现的异常，在服务消费端抛出。那么这里存在一个问题，如果服务提供者抛出的异常类，
        在服务消费者这边不存在，那么服务消费者也就抛不出这个异常了，那么dubbo是怎么处理的呢？这里就涉及到了ExceptionFilter，它是服务提供者端的一个过滤器，它主要是在服务提供者执行完服务后会去识别异常：
            1.如果是需要开发人员捕获的异常，那么忽略，直接把这个异常返回给消费者
            2.如果在当前所执行的方法签名上有声明，那么忽略，直接把这个异常返回给消费者
            3.如果抛出的异常不需要开发人员捕获，或者方法上没有申明，那么服务端或记录一个error日志
            4.异常类和接口类在同一jar包里，那么忽略，直接把这个异常返回给消费者
            5.如果异常类是JDK自带的异常，那么忽略，直接把这个异常返回给消费者
            6.如果异常类是Dubbo自带的异常，那么忽略，直接把这个异常返回给消费者
            7.否则，把异常信息包装成RuntimeException，并覆盖AppResponse对象中的exception属性
8.Dubbo集群容错负载均衡：
    https://mp.weixin.qq.com/s/-IkHNAM4B0R_j50LkQunig

